#pragma once
#include "Service.h"
#include "AntimalwareService.h"
#include "../FileWorker.h"
#include "Messanger.hpp"
#include "../schrodingerData.h"
#include "../ScanEngen.h"
#include <memory>
#include "../Schedule.h"
#include "../Monitor.h"
#include <vector>
#include <thread>
namespace Antimalware::ServiceApp
{
    class AntimalwareService : public ServiceLib::ServiceManagement::Service
    {
    public:
        AntimalwareService()
            : ServiceLib::ServiceManagement::Service(u"NadyezhniyAntimalwareService")
        { }

    protected:
        virtual void DoWork() override;
        virtual int DoStop() override;
        virtual int Init() override;
    private:
        bool onlyOnce = true;
        std::shared_ptr <Schedule> schedul;
        std::shared_ptr<schrodingerData>  data;
        std::shared_ptr<Engen::ScanEngen> scEn;
        std::shared_ptr<Monitor> monit;
        std::shared_ptr<FileWorker> fw;
        std::shared_ptr<DataIO::RecordBank> malwareData;
        std::pair<HANDLE,HANDLE> waitConnection();
        std::vector<HANDLE> backList;
        void work(std::pair<HANDLE, HANDLE> pipes);
        void movment(return_type param,Messanger pipeIOBack);
        std::string reportGen(std::string path, std::string& isSafe);
        void monitorBackGround();
        void scheduleBackGround();
        void sendFirsrInfo(Messanger& pipe);
    };

    class AntimalwareServiceFactory : public ServiceLib::ServiceManagement::IServiceFactory
    {
    public:
        AntimalwareServiceFactory();

        virtual std::unique_ptr<ServiceLib::ServiceManagement::Service> Create() override;

    
    };
}
